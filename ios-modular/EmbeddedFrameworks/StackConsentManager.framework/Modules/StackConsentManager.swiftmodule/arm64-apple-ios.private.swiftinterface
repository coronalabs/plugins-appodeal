// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name StackConsentManager
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import AppTrackingTransparency
import Foundation
import OSLog
import Swift
import UIKit
import UserMessagingPlatform
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc(APDConsentDialog) final public class ConsentDialog : ObjectiveC.NSObject {
  @objc final public func present(rootViewController: UIKit.UIViewController, completion: @escaping (Foundation.NSError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension StackConsentManager.ConsentDialog {
  @_Concurrency.MainActor final public func present(rootViewController: UIKit.UIViewController) async throws
}
@objc(APDAuthorizationStatus) public enum AuthorizationStatus : Swift.UInt {
  case notDetermined
  case restricted
  case denied
  case authorized
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(APDConsentStatus) public enum ConsentStatus : Swift.UInt {
  case unknown
  case required
  case notRequired
  case obtained
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public enum ConsentManagerError : Swift.Error {
  case requestTimeout
  case requestError(Swift.String)
  case serverError
  case cache
  case notRequested
  case alreadyPresented
  case presentationNotRequired
  case dialogNotLoaded
  case internalError(Swift.String)
  case invalidForm
  case generic(any Swift.Error)
  case formException(Swift.String)
}
extension StackConsentManager.ConsentManagerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc(APDConsentUrlProvider) public protocol ConsentUrlProvider : ObjectiveC.NSObjectProtocol {
  @objc var isAllHostsUnreached: Swift.Bool { get }
  @objc func endpoint(_ path: Swift.String?) -> Foundation.URL
  @objc func isTrustedURL(_ url: Foundation.URL) -> Swift.Bool
  @objc func blockEndpoint()
  @objc func update()
  @objc func reset()
}
@_inheritsConvenienceInitializers @objc(APDConsentManager) final public class ConsentManager : ObjectiveC.NSObject {
  @objc public static let shared: StackConsentManager.ConsentManager
  @objc dynamic final public var status: StackConsentManager.ConsentStatus {
    get
  }
  @objc final public func requestConsentInfoUpdate(parameters: StackConsentManager.ConsentUpdateRequestParameters, completion: @escaping (Foundation.NSError?) -> ())
  @objc final public func requestConsentInfoUpdate(parameters: StackConsentManager.ConsentUpdateRequestParameters, urlProvider: any StackConsentManager.ConsentUrlProvider, completion: @escaping (Foundation.NSError?) -> ())
  @objc final public func revoke()
  @objc final public func loadAndPresentIfNeeded(rootViewController: UIKit.UIViewController, completion: @escaping (Foundation.NSError?) -> ())
  @objc final public func load(completion: @escaping (StackConsentManager.ConsentDialog?, Foundation.NSError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13, *)
extension StackConsentManager.ConsentManager {
  final public func requestConsentInfoUpdate(parameters: StackConsentManager.ConsentUpdateRequestParameters) async throws
  final public func loadAndPresentIfNeeded(rootViewController: UIKit.UIViewController) async throws
  final public func load() async throws -> StackConsentManager.ConsentDialog
}
@objc(APDConsentUpdateRequestParameters) final public class ConsentUpdateRequestParameters : ObjectiveC.NSObject {
  @objc public init(appKey: Swift.String, mediationSdkName: Swift.String, mediationSdkVersion: Swift.String, COPPA: Swift.Bool)
  @objc deinit
}
extension StackConsentManager.AuthorizationStatus : Swift.Equatable {}
extension StackConsentManager.AuthorizationStatus : Swift.Hashable {}
extension StackConsentManager.AuthorizationStatus : Swift.RawRepresentable {}
extension StackConsentManager.ConsentStatus : Swift.Equatable {}
extension StackConsentManager.ConsentStatus : Swift.Hashable {}
extension StackConsentManager.ConsentStatus : Swift.RawRepresentable {}
